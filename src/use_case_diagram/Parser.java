
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 25 20:05:14 CEST 2018
//----------------------------------------------------

package use_case_diagram;

import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.UseCase;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 25 20:05:14 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\015\002\000\002\002\006\000\002\002" +
    "\004\000\002\003\002\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\016\002\000\002\005\010\000" +
    "\002\007\002\000\002\007\004\000\002\010\004\000\002" +
    "\017\002\000\002\006\010\000\002\011\002\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\013\004" +
    "\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\004\005\001\002\000\004\002\042\001" +
    "\002\000\004\012\006\001\002\000\010\002\001\005\001" +
    "\006\001\001\002\000\010\002\ufffe\005\ufffe\006\ufffe\001" +
    "\002\000\010\002\000\005\013\006\011\001\002\000\004" +
    "\012\026\001\002\000\010\002\ufffc\005\ufffc\006\ufffc\001" +
    "\002\000\004\012\016\001\002\000\010\002\ufffb\005\ufffb" +
    "\006\ufffb\001\002\000\010\002\ufffd\005\ufffd\006\ufffd\001" +
    "\002\000\004\013\ufffa\001\002\000\004\013\020\001\002" +
    "\000\006\007\ufff8\014\ufff8\001\002\000\006\007\024\014" +
    "\023\001\002\000\006\007\ufff7\014\ufff7\001\002\000\010" +
    "\002\ufff9\005\ufff9\006\ufff9\001\002\000\004\012\025\001" +
    "\002\000\006\007\ufff6\014\ufff6\001\002\000\004\013\ufff5" +
    "\001\002\000\004\013\030\001\002\000\010\010\ufff3\011" +
    "\ufff3\014\ufff3\001\002\000\010\010\033\011\034\014\035" +
    "\001\002\000\010\010\ufff1\011\ufff1\014\ufff1\001\002\000" +
    "\004\012\041\001\002\000\004\012\040\001\002\000\010" +
    "\002\ufff4\005\ufff4\006\ufff4\001\002\000\010\010\ufff2\011" +
    "\ufff2\014\ufff2\001\002\000\010\010\ufff0\011\ufff0\014\ufff0" +
    "\001\002\000\010\010\uffee\011\uffee\014\uffee\001\002\000" +
    "\010\010\uffef\011\uffef\014\uffef\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\006\001\001\000\004\003\007" +
    "\001\001\000\010\004\014\005\011\006\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\016\001\001\000" +
    "\002\001\001\000\004\007\020\001\001\000\004\010\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\026\001\001\000\002" +
    "\001\001\000\004\011\030\001\001\000\010\012\035\013" +
    "\031\014\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

	private Factory factory;
	
	public Model getModel(){
		return factory.getModel();
	}
	
	public Factory getFactory () {
		if (factory == null) factory = new Factory ();
		return factory;
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // extend ::= T_EXTEND NAME 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 	UseCase from = getFactory().getUseCase();
											getFactory().pushUseCase(name);
											UseCase to = getFactory().getUseCase();
											getFactory().addExtendUseCase(to,from); 
              CUP_result = getSymbolFactory().newSymbol("extend",10, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // include ::= T_INCLUDE NAME 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 	
											UseCase from = getFactory().getUseCase();
											getFactory().pushUseCase(name);
											UseCase to = getFactory().getUseCase();
											getFactory().addIncludeUseCase(from,to); 
											
              CUP_result = getSymbolFactory().newSymbol("include",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relation ::= extend 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("relation",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relation ::= include 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("relation",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relations ::= relations relation 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("relations",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relations ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("relations",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // useCase ::= T_USECASE NAME NT$2 O_BRACE relations C_BRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;

              CUP_result = getSymbolFactory().newSymbol("useCase",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
 getFactory().getUseCase(); getFactory().addSousUseCase(name); 
              CUP_result = getSymbolFactory().newSymbol("NT$2",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // association ::= T_ASSOCIATION NAME 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 
												getFactory().pushUseCase(name); 
												getFactory().addAssociation(getFactory().getActor(),getFactory().getUseCase());
												
              CUP_result = getSymbolFactory().newSymbol("association",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // associations ::= associations association 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("associations",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // associations ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("associations",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // actor ::= T_ACTOR NAME NT$1 O_BRACE associations C_BRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		 getFactory().pop (); 
              CUP_result = getSymbolFactory().newSymbol("actor",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
 getFactory().pushActor(name); 
              CUP_result = getSymbolFactory().newSymbol("NT$1",12, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= useCase 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= actor 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("declaration",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations declaration 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("declarations",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("declarations",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= model EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // model ::= T_MODEL NAME NT$0 declarations 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		 getFactory().pop(); 
              CUP_result = getSymbolFactory().newSymbol("model",0, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
 getFactory().pushModel(name); 
              CUP_result = getSymbolFactory().newSymbol("NT$0",11, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
